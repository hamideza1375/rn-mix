{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"FontDisplay\", {\n  enumerable: true,\n  get: function get() {\n    return _Font.FontDisplay;\n  }\n});\nexports.isLoaded = isLoaded;\nexports.isLoading = isLoading;\nexports.loadAsync = loadAsync;\nexports.processFontFamily = processFontFamily;\nexports.unloadAllAsync = unloadAllAsync;\nexports.unloadAsync = unloadAsync;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _ExpoFontLoader = _interopRequireDefault(require(\"./ExpoFontLoader\"));\n\nvar _Font = require(\"./Font.types\");\n\nvar _FontLoader = require(\"./FontLoader\");\n\nvar loaded = {};\nvar loadPromises = {};\n\nfunction processFontFamily(fontFamily) {\n  if (!fontFamily || !(0, _FontLoader.fontFamilyNeedsScoping)(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\"You started loading the font \\\"\" + fontFamily + \"\\\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.\");\n      } else {\n        console.error(\"fontFamily \\\"\" + fontFamily + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n      }\n    }\n\n    return 'System';\n  }\n\n  return \"ExpoFont-\" + (0, _FontLoader.getNativeFontName)(fontFamily);\n}\n\nfunction isLoaded(fontFamily) {\n  return fontFamily in loaded;\n}\n\nfunction isLoading(fontFamily) {\n  return fontFamily in loadPromises;\n}\n\nfunction loadAsync(fontFamilyOrFontMap, source) {\n  var fontMap, names;\n  return _regenerator.default.async(function loadAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(typeof fontFamilyOrFontMap === 'object')) {\n            _context.next = 8;\n            break;\n          }\n\n          if (!source) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new _expoModulesCore.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided source: \" + source + \". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");\n\n        case 3:\n          fontMap = fontFamilyOrFontMap;\n          names = Object.keys(fontMap);\n          _context.next = 7;\n          return _regenerator.default.awrap(Promise.all(names.map(function (name) {\n            return loadFontInNamespaceAsync(name, fontMap[name]);\n          })));\n\n        case 7:\n          return _context.abrupt(\"return\");\n\n        case 8:\n          _context.next = 10;\n          return _regenerator.default.awrap(loadFontInNamespaceAsync(fontFamilyOrFontMap, source));\n\n        case 10:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction loadFontInNamespaceAsync(fontFamily, source) {\n  var asset;\n  return _regenerator.default.async(function loadFontInNamespaceAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (source) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new _expoModulesCore.CodedError(\"ERR_FONT_SOURCE\", \"Cannot load null or undefined font source: { \\\"\" + fontFamily + \"\\\": \" + source + \" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\" + fontFamily + \"\\\"\");\n\n        case 2:\n          if (!loaded[fontFamily]) {\n            _context3.next = 4;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 4:\n          if (!loadPromises.hasOwnProperty(fontFamily)) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", loadPromises[fontFamily]);\n\n        case 6:\n          asset = (0, _FontLoader.getAssetForSource)(source);\n\n          loadPromises[fontFamily] = function _callee() {\n            return _regenerator.default.async(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.prev = 0;\n                    _context2.next = 3;\n                    return _regenerator.default.awrap((0, _FontLoader.loadSingleFontAsync)(fontFamily, asset));\n\n                  case 3:\n                    loaded[fontFamily] = true;\n\n                  case 4:\n                    _context2.prev = 4;\n                    delete loadPromises[fontFamily];\n                    return _context2.finish(4);\n\n                  case 7:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, [[0,, 4, 7]], Promise);\n          }();\n\n          _context3.next = 10;\n          return _regenerator.default.awrap(loadPromises[fontFamily]);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction unloadAllAsync() {\n  var _i, _Object$keys, fontFamily;\n\n  return _regenerator.default.async(function unloadAllAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (_ExpoFontLoader.default.unloadAllAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n\n        case 2:\n          if (!Object.keys(loadPromises).length) {\n            _context4.next = 4;\n            break;\n          }\n\n          throw new _expoModulesCore.CodedError(\"ERR_UNLOAD\", \"Cannot unload fonts while they're still loading: \" + Object.keys(loadPromises).join(', '));\n\n        case 4:\n          for (_i = 0, _Object$keys = Object.keys(loaded); _i < _Object$keys.length; _i++) {\n            fontFamily = _Object$keys[_i];\n            delete loaded[fontFamily];\n          }\n\n          _context4.next = 7;\n          return _regenerator.default.awrap(_ExpoFontLoader.default.unloadAllAsync());\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction unloadAsync(fontFamilyOrFontMap, options) {\n  var fontMap, names;\n  return _regenerator.default.async(function unloadAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (_ExpoFontLoader.default.unloadAsync) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n\n        case 2:\n          if (!(typeof fontFamilyOrFontMap === 'object')) {\n            _context5.next = 10;\n            break;\n          }\n\n          if (!options) {\n            _context5.next = 5;\n            break;\n          }\n\n          throw new _expoModulesCore.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided options: \" + options + \". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");\n\n        case 5:\n          fontMap = fontFamilyOrFontMap;\n          names = Object.keys(fontMap);\n          _context5.next = 9;\n          return _regenerator.default.awrap(Promise.all(names.map(function (name) {\n            return unloadFontInNamespaceAsync(name, fontMap[name]);\n          })));\n\n        case 9:\n          return _context5.abrupt(\"return\");\n\n        case 10:\n          _context5.next = 12;\n          return _regenerator.default.awrap(unloadFontInNamespaceAsync(fontFamilyOrFontMap, options));\n\n        case 12:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction unloadFontInNamespaceAsync(fontFamily, options) {\n  var nativeFontName;\n  return _regenerator.default.async(function unloadFontInNamespaceAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (loaded[fontFamily]) {\n            _context6.next = 4;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 4:\n          delete loaded[fontFamily];\n\n        case 5:\n          nativeFontName = (0, _FontLoader.getNativeFontName)(fontFamily);\n\n          if (nativeFontName) {\n            _context6.next = 8;\n            break;\n          }\n\n          throw new _expoModulesCore.CodedError(\"ERR_FONT_FAMILY\", \"Cannot unload an empty name\");\n\n        case 8:\n          _context6.next = 10;\n          return _regenerator.default.awrap(_ExpoFontLoader.default.unloadAsync(nativeFontName, options));\n\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAOA,IAAMA,MAAM,GAAgC,EAA5C;AACA,IAAMC,YAAY,GAAsC,EAAxD;;AAYM,SAAUC,iBAAV,CAA4BC,UAA5B,EAAqD;EACzD,IAAI,CAACA,UAAD,IAAe,CAAC,wCAAuBA,UAAvB,CAApB,EAAwD;IACtD,OAAOA,UAAP;EACD;;EAED,IAAI,CAACC,QAAQ,CAACD,UAAD,CAAb,EAA2B;IACzB,IAAIE,OAAJ,EAAa;MACX,IAAIC,SAAS,CAACH,UAAD,CAAb,EAA2B;QACzBI,OAAO,CAACC,KAAR,qCACmCL,UADnC;MAGD,CAJD,MAIO;QACLI,OAAO,CAACC,KAAR,mBACiBL,UADjB;MAKD;IACF;;IAED,OAAO,QAAP;EACD;;EAED,qBAAmB,mCAAkBA,UAAlB,CAAnB;AACD;;AASK,SAAUC,QAAV,CAAmBD,UAAnB,EAAqC;EACzC,OAAOA,UAAU,IAAIH,MAArB;AACD;;AASK,SAAUM,SAAV,CAAoBH,UAApB,EAAsC;EAC1C,OAAOA,UAAU,IAAIF,YAArB;AACD;;AAeM,SAAeQ,SAAf,CACLC,mBADK,EAELC,MAFK;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,MAID,OAAOD,mBAAP,KAA+B,QAJ9B;YAAA;YAAA;UAAA;;UAAA,KAKCC,MALD;YAAA;YAAA;UAAA;;UAAA,MAMK,IAAIC,2BAAJ,yEAEkDD,MAFlD,0GANL;;QAAA;UAWGE,OAXH,GAWaH,mBAXb;UAYGI,KAZH,GAYWC,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAZX;UAAA;UAAA,kCAaGI,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,GAAN,CAAU,UAACC,IAAD;YAAA,OAAUC,wBAAwB,CAACD,IAAD,EAAOP,OAAO,CAACO,IAAD,CAAd,CAAlC;UAAA,CAAV,CAAZ,CAbH;;QAAA;UAAA;;QAAA;UAAA;UAAA,kCAiBQC,wBAAwB,CAACX,mBAAD,EAAsBC,MAAtB,CAjBhC;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAoBP,SAAeU,wBAAf,CACElB,UADF,EAEEQ,MAFF;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,IAIOA,MAJP;YAAA;YAAA;UAAA;;UAAA,MAKU,IAAIC,2BAAJ,wEAE6CT,UAF7C,YAE6DQ,MAF7D,0EAEyIR,UAFzI,QALV;;QAAA;UAAA,KAWMH,MAAM,CAACG,UAAD,CAXZ;YAAA;YAAA;UAAA;;UAAA;;QAAA;UAAA,KAeMF,YAAY,CAACqB,cAAb,CAA4BnB,UAA5B,CAfN;YAAA;YAAA;UAAA;;UAAA,kCAgBWF,YAAY,CAACE,UAAD,CAhBvB;;QAAA;UAwBQoB,KAxBR,GAwBgB,mCAAkBZ,MAAlB,CAxBhB;;UAyBEV,YAAY,CAACE,UAAD,CAAZ,GAA4B;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA;oBAAA,kCAElB,qCAAoBA,UAApB,EAAgCoB,KAAhC,CAFkB;;kBAAA;oBAGxBvB,MAAM,CAACG,UAAD,CAAN,GAAqB,IAArB;;kBAHwB;oBAAA;oBAKxB,OAAOF,YAAY,CAACE,UAAD,CAAnB;oBALwB;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAD,EAA3B;;UAzBF;UAAA,kCAkCQF,YAAY,CAACE,UAAD,CAlCpB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAyCO,SAAeqB,cAAf;EAAA;;EAAA;IAAA;MAAA;QAAA;UAAA,IACAC,wBAAeD,cADf;YAAA;YAAA;UAAA;;UAAA,MAEG,IAAIE,oCAAJ,CAAwB,WAAxB,EAAqC,gBAArC,CAFH;;QAAA;UAAA,KAKDX,MAAM,CAACC,IAAP,CAAYf,YAAZ,EAA0B0B,MALzB;YAAA;YAAA;UAAA;;UAAA,MAMG,IAAIf,2BAAJ,qEAEgDG,MAAM,CAACC,IAAP,CAAYf,YAAZ,EAA0B2B,IAA1B,CAA+B,IAA/B,CAFhD,CANH;;QAAA;UAYL,4BAAyBb,MAAM,CAACC,IAAP,CAAYhB,MAAZ,CAAzB,kCAA8C;YAAnCG,UAAmC;YAC5C,OAAOH,MAAM,CAACG,UAAD,CAAb;UACD;;UAdI;UAAA,kCAgBCsB,wBAAeD,cAAf,EAhBD;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AA4BA,SAAeK,WAAf,CACLnB,mBADK,EAELoB,OAFK;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,IAIAL,wBAAeI,WAJf;YAAA;YAAA;UAAA;;UAAA,MAKG,IAAIH,oCAAJ,CAAwB,WAAxB,EAAqC,aAArC,CALH;;QAAA;UAAA,MAOD,OAAOhB,mBAAP,KAA+B,QAP9B;YAAA;YAAA;UAAA;;UAAA,KAQCoB,OARD;YAAA;YAAA;UAAA;;UAAA,MASK,IAAIlB,2BAAJ,0EAEmDkB,OAFnD,4GATL;;QAAA;UAcGjB,OAdH,GAcaH,mBAdb;UAeGI,KAfH,GAeWC,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAfX;UAAA;UAAA,kCAgBGI,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,GAAN,CAAU,UAACC,IAAD;YAAA,OAAUW,0BAA0B,CAACX,IAAD,EAAOP,OAAO,CAACO,IAAD,CAAd,CAApC;UAAA,CAAV,CAAZ,CAhBH;;QAAA;UAAA;;QAAA;UAAA;UAAA,kCAoBQW,0BAA0B,CAACrB,mBAAD,EAAsBoB,OAAtB,CApBlC;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAuBP,SAAeC,0BAAf,CACE5B,UADF,EAEE2B,OAFF;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,IAIO9B,MAAM,CAACG,UAAD,CAJb;YAAA;YAAA;UAAA;;UAAA;;QAAA;UAOI,OAAOH,MAAM,CAACG,UAAD,CAAb;;QAPJ;UAeQ6B,cAfR,GAeyB,mCAAkB7B,UAAlB,CAfzB;;UAAA,IAiBO6B,cAjBP;YAAA;YAAA;UAAA;;UAAA,MAkBU,IAAIpB,2BAAJ,kDAlBV;;QAAA;UAAA;UAAA,kCAqBQa,wBAAeI,WAAf,CAA2BG,cAA3B,EAA2CF,OAA3C,CArBR;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","names":["loaded","loadPromises","processFontFamily","fontFamily","isLoaded","__DEV__","isLoading","console","error","loadAsync","fontFamilyOrFontMap","source","CodedError","fontMap","names","Object","keys","Promise","all","map","name","loadFontInNamespaceAsync","hasOwnProperty","asset","unloadAllAsync","ExpoFontLoader","UnavailabilityError","length","join","unloadAsync","options","unloadFontInNamespaceAsync","nativeFontName"],"sourceRoot":"","sources":["../src/Font.ts"],"sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/introduction/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  return fontFamily in loaded;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport async function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"]},"metadata":{},"sourceType":"script"}